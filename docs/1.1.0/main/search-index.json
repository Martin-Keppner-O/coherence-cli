{
    "docs": [
        {
            "location": "/docs/installation/01_installation",
            "text": " Download the package installer for the latest version for either Intel or Apple Silicon (M1) directly below: Intel - Oracle-Coherence-CLI-1.1.0-darwin-amd64.pkg Apple Silicon - Oracle-Coherence-CLI-1.1.0-darwin-arm64.pkg When you install the pkg it will place the cohctl executable in the /usr/local/bin directory. You can move it out of this directory if you wish after installation. ",
            "title": "macOS"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " Install the latest release using curl on Linux: <markup lang=\"bash\" >curl -Lo cohctl \"https://github.com/oracle/coherence-cli/releases/download/1.1.0/cohctl-1.1.0-linux-amd64\" chmod u+x ./cohctl You can move the executable to your preferred location afterwards. Change the amd64 to arm64 for ARM based processor, or to 386 for i386 processors. To install a specific release, change the version number in the above command. ",
            "title": "Linux"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " Install the latest version using curl on Windows and copy to a directory in your PATH: <markup lang=\"bash\" >curl -Lo cohctl.exe \"https://github.com/oracle/coherence-cli/releases/download/1.1.0/cohctl-1.1.0-windows-amd64.exe\" Change the amd64 to arm for ARM based processor. ",
            "title": "Windows"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " To uninstall cohctl , for Mac, issue the following: <markup lang=\"command\" >sudo rm /usr/local/bin/cohctl For all other platforms, remove the cohctl executable from where you copied it to. If you also wish to uninstall the configuration directory, .cohctl , where cohctl stores its configuration, you will find this off the users home directory. See here for more information. ",
            "title": "Removing the CLI"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " Run the Quick Start ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " The Coherence CLI is installable on a variety of platforms and architectures including macOS, Linux and Windows. Refer to your operating system below: The latest version of the CLI is 1.1.0 . macOS Linux Windows See here for all supported platforms. See here for instructions on removing cohctl . If there is a platform you would like included, please submit an issue here . macOS Download the package installer for the latest version for either Intel or Apple Silicon (M1) directly below: Intel - Oracle-Coherence-CLI-1.1.0-darwin-amd64.pkg Apple Silicon - Oracle-Coherence-CLI-1.1.0-darwin-arm64.pkg When you install the pkg it will place the cohctl executable in the /usr/local/bin directory. You can move it out of this directory if you wish after installation. Linux Install the latest release using curl on Linux: <markup lang=\"bash\" >curl -Lo cohctl \"https://github.com/oracle/coherence-cli/releases/download/1.1.0/cohctl-1.1.0-linux-amd64\" chmod u+x ./cohctl You can move the executable to your preferred location afterwards. Change the amd64 to arm64 for ARM based processor, or to 386 for i386 processors. To install a specific release, change the version number in the above command. Windows Install the latest version using curl on Windows and copy to a directory in your PATH: <markup lang=\"bash\" >curl -Lo cohctl.exe \"https://github.com/oracle/coherence-cli/releases/download/1.1.0/cohctl-1.1.0-windows-amd64.exe\" Change the amd64 to arm for ARM based processor. Removing the CLI To uninstall cohctl , for Mac, issue the following: <markup lang=\"command\" >sudo rm /usr/local/bin/cohctl For all other platforms, remove the cohctl executable from where you copied it to. If you also wish to uninstall the configuration directory, .cohctl , where cohctl stores its configuration, you will find this off the users home directory. See here for more information. Next Steps Run the Quick Start ",
            "title": "Coherence CLI Installation"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Usage cohctl get caches [flags] Flags -h, --help help for caches -s, --service string Service name Examples Display all caches. <markup lang=\"bash\" >$ cohctl get caches -c local Total Caches: 3, Total primary storage: 16MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache test1 100,000 16,800,000 16MB 168 200,000 0 0 0 0 0.00% PartitionedCache test2 123 142,680 0MB 1,160 246 0 0 0 0 0.00% PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% Display all caches for a particular service. <markup lang=\"bash\" >$ cohctl get caches -c local -s PartitionedCache2 Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% ",
            "title": "Get Caches"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >$ cohctl describe cache test -c local -s PartitionedCache ",
            "title": "Describe Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. ",
            "title": "Set Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " There are various commands that allow you to work with and manage cluster caches. cohctl get caches - displays the caches for a cluster cohctl describe cache - shows information related to a specific cache and service cohctl set cache - sets an attribute for a cache across one or more members Get Caches The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Usage cohctl get caches [flags] Flags -h, --help help for caches -s, --service string Service name Examples Display all caches. <markup lang=\"bash\" >$ cohctl get caches -c local Total Caches: 3, Total primary storage: 16MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache test1 100,000 16,800,000 16MB 168 200,000 0 0 0 0 0.00% PartitionedCache test2 123 142,680 0MB 1,160 246 0 0 0 0 0.00% PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% Display all caches for a particular service. <markup lang=\"bash\" >$ cohctl get caches -c local -s PartitionedCache2 Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% Describe Cache The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >$ cohctl describe cache test -c local -s PartitionedCache Set Cache The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " Services Topics ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " Overview There are various commands that allow you to work with and manage cluster caches. cohctl get caches - displays the caches for a cluster cohctl describe cache - shows information related to a specific cache and service cohctl set cache - sets an attribute for a cache across one or more members Get Caches The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Usage cohctl get caches [flags] Flags -h, --help help for caches -s, --service string Service name Examples Display all caches. <markup lang=\"bash\" >$ cohctl get caches -c local Total Caches: 3, Total primary storage: 16MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache test1 100,000 16,800,000 16MB 168 200,000 0 0 0 0 0.00% PartitionedCache test2 123 142,680 0MB 1,160 246 0 0 0 0 0.00% PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% Display all caches for a particular service. <markup lang=\"bash\" >$ cohctl get caches -c local -s PartitionedCache2 Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB AVG SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES TOTAL HITS TOTAL MISSES HIT PROB PartitionedCache2 test-123 0 0 0MB 0 0 0 0 0 0 0.00% Describe Cache The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >$ cohctl describe cache test -c local -s PartitionedCache Set Cache The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. See Also Services Topics ",
            "title": "Caches"
        },
        {
            "location": "/docs/examples/01_overview",
            "text": " This section contains various examples when using the Coherence CLI. Monitoring Rolling Restarts Monitoring a cluster rolling restart with the Coherence-CLI. Using JSONPath Expressions Using JSONPath expressions to refine output. Setting Cache Attributes Set cache attributes such as expiry delay. ",
            "title": "Examples"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >$ cohctl get http-servers -c local APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 ",
            "title": "Get Http Sessions"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >$ cohctl describe http-session app-1 -c local ",
            "title": "Describe Http Session"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " There are various commands that allow you to work with and manage Coherence*Web Http session information. cohctl get http-sessions - displays the Http session details cohctl describe http-session - shows http session information related to a specific application id This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Http Sessions The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >$ cohctl get http-servers -c local APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 Describe Http Session The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >$ cohctl describe http-session app-1 -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " Overview There are various commands that allow you to work with and manage Coherence*Web Http session information. cohctl get http-sessions - displays the Http session details cohctl describe http-session - shows http session information related to a specific application id This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Http Sessions The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >$ cohctl get http-servers -c local APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 Describe Http Session The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >$ cohctl describe http-session app-1 -c local ",
            "title": "Http Sessions"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get reporters -c local NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false ",
            "title": "Get Reporters"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl describe reporter 1 -c local ",
            "title": "Describe Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl start reporter 1 -c local ",
            "title": "Start Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl stop reporter 1 -c local ",
            "title": "Stop Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " There are various commands that allow you to work with and manage Reporters servers. cohctl get reporters - displays the reporters for a cluster cohctl describe reporter - shows information related to a specific reporter cohctl start reporter - starts a reporter on a specific node cohctl stop reporter - stops a reporter on a specific node Get Reporters The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get reporters -c local NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false Describe Reporter The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl describe reporter 1 -c local Start Reporter The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl start reporter 1 -c local Stop Reporter The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl stop reporter 1 -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " Overview There are various commands that allow you to work with and manage Reporters servers. cohctl get reporters - displays the reporters for a cluster cohctl describe reporter - shows information related to a specific reporter cohctl start reporter - starts a reporter on a specific node cohctl stop reporter - stops a reporter on a specific node Get Reporters The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get reporters -c local NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms false Describe Reporter The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl describe reporter 1 -c local Start Reporter The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl start reporter 1 -c local Stop Reporter The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >$ cohctl stop reporter 1 -c local See Also Services ",
            "title": "Reporters"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -h, --help help for members -r, --role string role name to display (default \"all\") Examples Display all members. <markup lang=\"bash\" >$ cohctl get members -c local Cluster Heap - Total: 2.500GB, Used: 305MB, Available: 2.202GB (88.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 95MB 929MB 2 /192.168.1.124 53215 12094 n/a Management 512MB 112MB 400MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 98MB 926MB Display all members with the role CoherenceServer . <markup lang=\"bash\" >$ cohctl get members -c local -r CoherenceServer Cluster Heap - Total: 2.000GB, Used: 197MB, Available: 1.808GB (90.4%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 98MB 926MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 99MB 925MB You can also use -o wide to display more columns. ",
            "title": "Get Members"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >$ cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >$ cohctl describe member 1 -Xg1 ",
            "title": "Describe Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members. <markup lang=\"bash\" ># Check the log level first $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, $ cohctl set member all -a loggingLevel -v 6 -c local re you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >$ cohctl set member 1 -a loggingLevel -v 9 -c local Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, ",
            "title": "Set Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >$ cohctl shutdown member 1 -c local Are you sure you want to shutdown member 1? (y/n) y operation completed This command may take a while to complete. Check the server logs for information regarding the member&#8217;s status. If the services were started using DefaultCacheServer, then they will be restarted. ",
            "title": "Shutdown Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " There are various cluster commands that allow you to work with and manage cluster members. cohctl get members - displays the members for a cluster cohctl describe member - shows information related to a specific member cohctl set member - sets a member attribute for one or more members cohctl shutdown member - shuts down a members services in a controlled manner Get Members The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -h, --help help for members -r, --role string role name to display (default \"all\") Examples Display all members. <markup lang=\"bash\" >$ cohctl get members -c local Cluster Heap - Total: 2.500GB, Used: 305MB, Available: 2.202GB (88.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 95MB 929MB 2 /192.168.1.124 53215 12094 n/a Management 512MB 112MB 400MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 98MB 926MB Display all members with the role CoherenceServer . <markup lang=\"bash\" >$ cohctl get members -c local -r CoherenceServer Cluster Heap - Total: 2.000GB, Used: 197MB, Available: 1.808GB (90.4%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 98MB 926MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 99MB 925MB You can also use -o wide to display more columns. Describe Member The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >$ cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >$ cohctl describe member 1 -Xg1 Set Member The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members. <markup lang=\"bash\" ># Check the log level first $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, $ cohctl set member all -a loggingLevel -v 6 -c local re you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >$ cohctl set member 1 -a loggingLevel -v 9 -c local Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, Shutdown Member The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >$ cohctl shutdown member 1 -c local Are you sure you want to shutdown member 1? (y/n) y operation completed This command may take a while to complete. Check the server logs for information regarding the member&#8217;s status. If the services were started using DefaultCacheServer, then they will be restarted. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " Diagnostics ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " Overview There are various cluster commands that allow you to work with and manage cluster members. cohctl get members - displays the members for a cluster cohctl describe member - shows information related to a specific member cohctl set member - sets a member attribute for one or more members cohctl shutdown member - shuts down a members services in a controlled manner Get Members The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -h, --help help for members -r, --role string role name to display (default \"all\") Examples Display all members. <markup lang=\"bash\" >$ cohctl get members -c local Cluster Heap - Total: 2.500GB, Used: 305MB, Available: 2.202GB (88.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 95MB 929MB 2 /192.168.1.124 53215 12094 n/a Management 512MB 112MB 400MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 98MB 926MB Display all members with the role CoherenceServer . <markup lang=\"bash\" >$ cohctl get members -c local -r CoherenceServer Cluster Heap - Total: 2.000GB, Used: 197MB, Available: 1.808GB (90.4%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 53216 12096 n/a CoherenceServer 1.000GB 98MB 926MB 3 /192.168.1.124 53220 12246 n/a CoherenceServer 1.000GB 99MB 925MB You can also use -o wide to display more columns. Describe Member The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >$ cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >$ cohctl describe member 1 -Xg1 Set Member The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members. <markup lang=\"bash\" ># Check the log level first $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, $ cohctl set member all -a loggingLevel -v 6 -c local re you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >$ cohctl set member 1 -a loggingLevel -v 9 -c local Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed $ cohctl get members -o json | jq | grep loggingLevel \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, Shutdown Member The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >$ cohctl shutdown member 1 -c local Are you sure you want to shutdown member 1? (y/n) y operation completed This command may take a while to complete. Check the server logs for information regarding the member&#8217;s status. If the services were started using DefaultCacheServer, then they will be restarted. See Also Diagnostics ",
            "title": "Members"
        },
        {
            "location": "/docs/about/01_overview",
            "text": " assistant Introduction Introduction to the Coherence CLI. fa-save Install Installing the Coherence CLI for your platform. fa-rocket Quick Start Quick start guide to getting started with the Coherence CLI. fa-cogs Configuration Configuration options. widgets Command Reference Coherence CLI Command Reference. lock Security Securing CLI access. fa-question-circle Troubleshooting Hints and tips to troubleshoot common issues. explore Examples A number of examples on how get the most out of the Coherence CLI. ",
            "title": "Get Going"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples <markup lang=\"bash\" >$ cohctl get machines -c local MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 66c301108e8a/172.17.0.2 4 0.3300 8.500GB 5.858GB 68.92% Linux amd64 5.10.47-linuxkit ",
            "title": "Get Members"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 66c301108e8a/172.17.0.2. <markup lang=\"bash\" >$ cohctl describe machine 66c301108e8a/172.17.0.2 -c local Machine Name : 66c301108e8a/172.17.0.2 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit ",
            "title": "Describe Machine"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " There are various cluster commands that allow you display information about cluster machines. cohctl get machines - displays the machines for a cluster cohctl describe machine - shows information related to a specific machine Get Members The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples <markup lang=\"bash\" >$ cohctl get machines -c local MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 66c301108e8a/172.17.0.2 4 0.3300 8.500GB 5.858GB 68.92% Linux amd64 5.10.47-linuxkit Describe Machine The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 66c301108e8a/172.17.0.2. <markup lang=\"bash\" >$ cohctl describe machine 66c301108e8a/172.17.0.2 -c local Machine Name : 66c301108e8a/172.17.0.2 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " Members ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " Overview There are various cluster commands that allow you display information about cluster machines. cohctl get machines - displays the machines for a cluster cohctl describe machine - shows information related to a specific machine Get Members The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples <markup lang=\"bash\" >$ cohctl get machines -c local MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 66c301108e8a/172.17.0.2 4 0.3300 8.500GB 5.858GB 68.92% Linux amd64 5.10.47-linuxkit Describe Machine The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 66c301108e8a/172.17.0.2. <markup lang=\"bash\" >$ cohctl describe machine 66c301108e8a/172.17.0.2 -c local Machine Name : 66c301108e8a/172.17.0.2 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit See Also Members ",
            "title": "Machines"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >$ cohctl get proxies -c local NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. ",
            "title": "Get Proxies"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >$ cohctl describe proxy Proxy -c local ",
            "title": "Describe Proxy"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " There are various commands that allow you to work with and manage proxy servers. cohctl get proxies - displays the proxy servers for a cluster cohctl describe proxy - shows information related to a specific proxy server Get Proxies The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >$ cohctl get proxies -c local NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. Describe Proxy The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >$ cohctl describe proxy Proxy -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " Overview There are various commands that allow you to work with and manage proxy servers. cohctl get proxies - displays the proxy servers for a cluster cohctl describe proxy - shows information related to a specific proxy server Get Proxies The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >$ cohctl get proxies -c local NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. Describe Proxy The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >$ cohctl describe proxy Proxy -c local See Also Services ",
            "title": "Proxy Servers"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all caches. <markup lang=\"bash\" >$ cohctl get persistence -c local Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE BYTES USED ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0MB 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0MB 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 6MB 0.242ms 188ms 2 Idle ",
            "title": "Get Persistence"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 ",
            "title": "Get Snapshots"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl create snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. ",
            "title": "Create Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. ",
            "title": "Recover Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed ",
            "title": "Remove Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl archive snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. ",
            "title": "Archive Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. ",
            "title": "Retrieve Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl suspend service PartitionedCache -c local Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. ",
            "title": "Suspend Service"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl resume service PartitionedCache -c local Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed ",
            "title": "Resume Service"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " There are various commands that allow you to work with and issue Persistence commands. cohctl get persistence - displays persistence information for a cluster cohctl get snapshots - shows persistence snapshots for a cluster cohctl create snapshot - create a snapshot for a service cohctl recover snapshot - recover a snapshot for a service cohctl remove snapshot - remove a snapshot for a service cohctl archive snapshot - archive a snapshot for a service cohctl retrieve snapshot - retrieve an archived snapshot for a service cohctl suspend service - suspends a specific service in all the members of a cluster cohctl resume service - resumes a specific service in all the members of a cluster See the Coherence Documentation for more information on Persistence. Get Persistence The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all caches. <markup lang=\"bash\" >$ cohctl get persistence -c local Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE BYTES USED ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0MB 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0MB 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 6MB 0.242ms 188ms 2 Idle Get Snapshots The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 Create Snapshot The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl create snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. Recover Snapshot The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. Remove Snapshot The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Archive Snapshot The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl archive snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. Retrieve Snapshot The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. Suspend Service The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl suspend service PartitionedCache -c local Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. Resume Service The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl resume service PartitionedCache -c local Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " Persisting Caches in the Coherence Documentation Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " Overview There are various commands that allow you to work with and issue Persistence commands. cohctl get persistence - displays persistence information for a cluster cohctl get snapshots - shows persistence snapshots for a cluster cohctl create snapshot - create a snapshot for a service cohctl recover snapshot - recover a snapshot for a service cohctl remove snapshot - remove a snapshot for a service cohctl archive snapshot - archive a snapshot for a service cohctl retrieve snapshot - retrieve an archived snapshot for a service cohctl suspend service - suspends a specific service in all the members of a cluster cohctl resume service - resumes a specific service in all the members of a cluster See the Coherence Documentation for more information on Persistence. Get Persistence The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all caches. <markup lang=\"bash\" >$ cohctl get persistence -c local Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE BYTES USED ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0MB 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0MB 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 6MB 0.242ms 188ms 2 Idle Get Snapshots The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >$ cohctl get snapshots -c local -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >$ cohctl get snapshots -c local -s PartitionedCache -a SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 Create Snapshot The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl create snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. Recover Snapshot The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. Remove Snapshot The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >$ cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Archive Snapshot The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl archive snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. Retrieve Snapshot The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. Suspend Service The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl suspend service PartitionedCache -c local Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. Resume Service The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl resume service PartitionedCache -c local Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed See Also Persisting Caches in the Coherence Documentation Services ",
            "title": "Persistence"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >$ cohctl get jfrs -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) ",
            "title": "Get JFRS"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -c local Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -n 2 -c local Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr ",
            "title": "Start JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >$ cohctl describe jfr test-1 -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) ",
            "title": "Describe JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop jfr test1 -c local Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". ",
            "title": "Stop JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >$ cohctl dump jfr test1 -c local Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr ",
            "title": "Dump JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local -r TangosolNetCoherence Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. ",
            "title": "Dump Cluster Heap"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local -r TangosolNetCoherence Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information ",
            "title": "Log Cluster State"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory'. Usage cohctl retrieve thread-dumps node-ids [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp all -c local This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp ",
            "title": "Retrieve Thread Dumps"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 rracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >$ cohctl configure tracing -t 0 -c local Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >$ cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information ",
            "title": "Configure Tracing"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >$ cohctl get tracing -c local NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 ",
            "title": "Get Tracing"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " There are various commands that allow you to obtain diagnostic output such as Java Flight Recordings or JFR&#8217;s, heap dumps and thread dumps. cohctl get jfrs - displays the JFR&#8217;s for a cluster cohctl start jfr - start a JFR for all or selected members cohctl describe jfr - describe a JFR cohctl stop jfr - stop a JFR for all or selected members cohctl dump jfr - dump a JFR that is running for all or selected members cohctl dump cluster-heap - dumps the cluster heap for all or specific roles cohctl log cluster-state - logs the cluster state via, a thread dump, for all or specific roles cohctl retrieve thread-dumps - retrieves thread dumps for all or specific nodes cohctl configure tracing - configures tracing for all members or a specific role cohctl get tracing - displays tracing status for all members Get JFRS The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >$ cohctl get jfrs -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Start JFR The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -c local Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -n 2 -c local Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr Describe JFR The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >$ cohctl describe jfr test-1 -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Stop JFR The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop jfr test1 -c local Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". Dump JFR The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >$ cohctl dump jfr test1 -c local Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr Dump Cluster Heap The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local -r TangosolNetCoherence Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. Log Cluster State The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local -r TangosolNetCoherence Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Retrieve Thread Dumps The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory'. Usage cohctl retrieve thread-dumps node-ids [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp all -c local This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp Configure Tracing The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 rracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >$ cohctl configure tracing -t 0 -c local Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >$ cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Get Tracing The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >$ cohctl get tracing -c local NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " Members Distributed Tracing in Coherence ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " Overview There are various commands that allow you to obtain diagnostic output such as Java Flight Recordings or JFR&#8217;s, heap dumps and thread dumps. cohctl get jfrs - displays the JFR&#8217;s for a cluster cohctl start jfr - start a JFR for all or selected members cohctl describe jfr - describe a JFR cohctl stop jfr - stop a JFR for all or selected members cohctl dump jfr - dump a JFR that is running for all or selected members cohctl dump cluster-heap - dumps the cluster heap for all or specific roles cohctl log cluster-state - logs the cluster state via, a thread dump, for all or specific roles cohctl retrieve thread-dumps - retrieves thread dumps for all or specific nodes cohctl configure tracing - configures tracing for all members or a specific role cohctl get tracing - displays tracing status for all members Get JFRS The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >$ cohctl get jfrs -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Start JFR The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -c local Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -n 2 -c local Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >$ cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr Describe JFR The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >$ cohctl describe jfr test-1 -c local Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Stop JFR The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop jfr test1 -c local Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". Dump JFR The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >$ cohctl dump jfr test1 -c local Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr Dump Cluster Heap The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >$ cohctl dump cluster-heap -c local -r TangosolNetCoherence Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. Log Cluster State The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >$ cohctl log cluster-state -c local -r TangosolNetCoherence Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Retrieve Thread Dumps The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory'. Usage cohctl retrieve thread-dumps node-ids [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp all -c local This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >$ cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp Configure Tracing The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 rracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >$ cohctl configure tracing -t 0 -c local Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >$ cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Get Tracing The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >$ cohctl get tracing -c local NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 See Also Members Distributed Tracing in Coherence ",
            "title": "Diagnostics"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get topics' command displays topics for a cluster. If no service name is specified then all services are queried. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >$ cohctl get topics -c local Total Topics: 3, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 PartitionedTopic2 public-messages2 15 7,444 0MB 510 13 36 Display all topics for a particular service. <markup lang=\"bash\" >$ cohctl get topics -c local -s PartitionedTopic Total Topics: 2, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 If you want to describe a topic, please use get caches to list the topics caches and describe the cache. See Caches for more information. ",
            "title": "Get Topics"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " There are various commands that allow you to work with and manage cluster topics. cohctl get topics - displays the topics for a cluster Get Topics The 'get topics' command displays topics for a cluster. If no service name is specified then all services are queried. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >$ cohctl get topics -c local Total Topics: 3, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 PartitionedTopic2 public-messages2 15 7,444 0MB 510 13 36 Display all topics for a particular service. <markup lang=\"bash\" >$ cohctl get topics -c local -s PartitionedTopic Total Topics: 2, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 If you want to describe a topic, please use get caches to list the topics caches and describe the cache. See Caches for more information. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " Caches Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " Overview There are various commands that allow you to work with and manage cluster topics. cohctl get topics - displays the topics for a cluster Get Topics The 'get topics' command displays topics for a cluster. If no service name is specified then all services are queried. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >$ cohctl get topics -c local Total Topics: 3, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 PartitionedTopic2 public-messages2 15 7,444 0MB 510 13 36 Display all topics for a particular service. <markup lang=\"bash\" >$ cohctl get topics -c local -s PartitionedTopic Total Topics: 2, Total primary storage: 0MB SERVICE TOPIC UNCONSUMED MSG BYTES MB AVG SIZE PUBLISHER SENDS SUBSCRIBER RECEIVES PartitionedTopic private-messages 2 1,024 0MB 512 2 4 PartitionedTopic public-messages 14 7,152 0MB 510 18 36 If you want to describe a topic, please use get caches to list the topics caches and describe the cache. See Caches for more information. See Also Caches Services ",
            "title": "Topics"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get http-servers -c local NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. ",
            "title": "Get Http Servers"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >$ cohctl describe http-proxy ManagementHttpProxy -c local ",
            "title": "Describe Http Server"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " There are various commands that allow you to work with and manage http servers. cohctl get http-servers - displays the http servers for a cluster cohctl describe http-server - shows information related to a specific http server Get Http Servers The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get http-servers -c local NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. Describe Http Server The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >$ cohctl describe http-proxy ManagementHttpProxy -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " Overview There are various commands that allow you to work with and manage http servers. cohctl get http-servers - displays the http servers for a cluster cohctl describe http-server - shows information related to a specific http server Get Http Servers The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >$ cohctl get http-servers -c local NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. Describe Http Server The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >$ cohctl describe http-proxy ManagementHttpProxy -c local See Also Services ",
            "title": "Http Servers"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, and NameService/string/metrics/HTTPMetricsURL, NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/info localhost:7574 Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 $ cohctl nslookup -q NameService/string/Cluster/foreign [cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/management/HTTPManagementURL [http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort 51065 ",
            "title": "NS Lookup"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " The CLI provides an implementation of the Name Service lookup to query a clusters Name Service endpoint for various query values. You can provide zero or more host/port pairs to this command. If you do not provide a host, localhost will be used and if you do not provide a port, then the default port 7574 will be used. cohctl nslookup - looks up various Name Service endpoints for a cluster host/port NS Lookup The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, and NameService/string/metrics/HTTPMetricsURL, NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/info localhost:7574 Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 $ cohctl nslookup -q NameService/string/Cluster/foreign [cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/management/HTTPManagementURL [http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort 51065 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " Overview The CLI provides an implementation of the Name Service lookup to query a clusters Name Service endpoint for various query values. You can provide zero or more host/port pairs to this command. If you do not provide a host, localhost will be used and if you do not provide a port, then the default port 7574 will be used. cohctl nslookup - looks up various Name Service endpoints for a cluster host/port NS Lookup The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, and NameService/string/metrics/HTTPMetricsURL, NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/info localhost:7574 Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >$ cohctl nslookup -q Cluster/name cluster1 $ cohctl nslookup -q NameService/string/Cluster/foreign [cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/management/HTTPManagementURL [http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >$ cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort 51065 See Also Clusters ",
            "title": "NS Lookup"
        },
        {
            "location": "/docs/reference/01_overview",
            "text": " The Coherence CLI contains many commands to manage and monitor Coherence clusters. Clusters Manage Cluster Connections. Contexts Adding arbitrary JVM arguments and system properties. Members Display and describe member information. Machines Display and describe machine information. Services Display and describe service information. Caches Display and describe cache information. Topics Display Topics information. Persistence Display and perform Persistence operations. Federation Display and perform Federation operations. Proxy Servers Display and describe proxy server information. Http Proxy Servers Display and describe Http proxy server information. Elastic Data Display and describe Elastic Data information. Http Sessions Display and describe Coherence*Web Http session information. Executors Display and describe Executors. Reporters Display and manage Coherence reporters. Diagnostics Take multiple thread dumps, heap dumps or JFR&#8217;s across members. NS Lookup Look up various Name Service endpoints for a cluster. Miscellaneous Various settings related commands. ",
            "title": "Reference"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >$ cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE ",
            "title": "Get Services"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >$ cohctl describe service PartitionedCache -c local ",
            "title": "Describe Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl start service PartitionedCache -n 1 -c local Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Start Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop service PartitionedCache -n 1 -c local Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Stop Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl shutdown service PartitionedCache -n 1 -c local Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Shutdown Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service &lt;service-name&gt; [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >$ cohctl get services -c local SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 257 ManagementHttpProxy Proxy 1 n/a -1 -1 $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >$ cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] ",
            "title": "Set Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " There are various commands that allow you to work with and manage cluster services. cohctl get services - displays the services for a cluster cohctl describe service - shows information related to a specific service cohctl start service - starts a specific service on a cluster member cohctl stop service - forces a specific service to stop on a cluster member cohctl shutdown service - performs a controlled shut-down of a specific service on a cluster member cohctl set service - sets a service attribute across one or more members Get Services The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >$ cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE Describe Service The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >$ cohctl describe service PartitionedCache -c local Start Service The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl start service PartitionedCache -n 1 -c local Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed Stop Service The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop service PartitionedCache -n 1 -c local Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed Shutdown Service The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl shutdown service PartitionedCache -n 1 -c local Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed Set Service The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service &lt;service-name&gt; [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >$ cohctl get services -c local SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 257 ManagementHttpProxy Proxy 1 n/a -1 -1 $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >$ cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " Rolling Restarts Caches ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " Overview There are various commands that allow you to work with and manage cluster services. cohctl get services - displays the services for a cluster cohctl describe service - shows information related to a specific service cohctl start service - starts a specific service on a cluster member cohctl stop service - forces a specific service to stop on a cluster member cohctl shutdown service - performs a controlled shut-down of a specific service on a cluster member cohctl set service - sets a service attribute across one or more members Get Services The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >$ cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >$ cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE Describe Service The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >$ cohctl describe service PartitionedCache -c local Start Service The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl start service PartitionedCache -n 1 -c local Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed Stop Service The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl stop service PartitionedCache -n 1 -c local Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed Shutdown Service The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl shutdown service PartitionedCache -n 1 -c local Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed Set Service The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service &lt;service-name&gt; [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >$ cohctl get services -c local SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 257 ManagementHttpProxy Proxy 1 n/a -1 -1 $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >$ cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed $ cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" [\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] See Also Rolling Restarts Caches ",
            "title": "Services"
        },
        {
            "location": "/docs/config/05_global_flags",
            "text": " Changing Config Locations Using JsonPath ",
            "title": "See Also"
        },
        {
            "location": "/docs/config/05_global_flags",
            "text": " The Coherence CLI provides a number of global flags that are available in all the commands. These flags are described below. <markup lang=\"bash\" >Flags: --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -h, --help help for cohctl -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) See Also Changing Config Locations Using JsonPath ",
            "title": "Global Flags"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " This example walks you through how to monitor the High Available (HA) Status or StatusHA value for Coherence Partitioned Services within a cluster by using the cohctl get services command. StatusHA is most commonly used to ensure services are in a safe state between restarting cache servers during a rolling restart. ",
            "title": "Overview"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In this example we have a cluster called my-cluster with the following setup: A single storage-disabled management node running Management over REST enabled 2 storage-enabled nodes on machine1 2 storage-enabled nodes on machine2 2 storage-enabled nodes on machine3 A Coherence console client running ",
            "title": "Setup for this Example"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE local http http://localhost:30000/management/coherence/cluster 21.12 my-cluster Standalone $ cohctl set context local Current context is now local ",
            "title": "1. Show the clusters"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >$ cohctl get members -o wide Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512MB 53MB 459MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1.000GB 307MB 717MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1.000GB 140MB 884MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 175MB 849MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 184MB 840MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 124MB 900MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 97MB 927MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256MB 22MB 234MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. ",
            "title": "2. Get the members"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >$ cohctl get services -t DistributedCache -o wide Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced ",
            "title": "3. Get the partitioned services"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In our case we have the following caches defined: <markup lang=\"bash\" >$ cohctl get caches Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache tim 1,000 10,160,000 9MB PartitionedCache2 test-1 100,000 116,000,000 110MB PartitionedCache2 test-2 50,000 58,000,000 55MB You can use the -o wide to display more information. ",
            "title": "4. View the caches"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >$ cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. ",
            "title": "5. Start watching the services"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines ",
            "title": "6. Carry out a rolling restart of the cluster."
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In this example we will carry out a rolling restart of our cluster to simulate applying an application code patch to our cluster. For more details on rolling restarts, please see Starting and Stopping Cluster Members in the Coherence documentation. The process will be: Stop member 1 on first machine Wait for NODE-SAFE - (Can&#8217;t get to MACHINE-SAFE because of unbalanced partition counts between machines) Stop member 2 on first machine Wait for MACHINE-SAFE - When they could apply an application patch to our first machine. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Read on below for the example. 1. Show the clusters <markup lang=\"bash\" >$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE local http http://localhost:30000/management/coherence/cluster 21.12 my-cluster Standalone $ cohctl set context local Current context is now local 2. Get the members <markup lang=\"bash\" >$ cohctl get members -o wide Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512MB 53MB 459MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1.000GB 307MB 717MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1.000GB 140MB 884MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 175MB 849MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 184MB 840MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 124MB 900MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 97MB 927MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256MB 22MB 234MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. 3. Get the partitioned services <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -o wide Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced 4. View the caches In our case we have the following caches defined: <markup lang=\"bash\" >$ cohctl get caches Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache tim 1,000 10,160,000 9MB PartitionedCache2 test-1 100,000 116,000,000 110MB PartitionedCache2 test-2 50,000 58,000,000 55MB You can use the -o wide to display more information. 5. Start watching the services <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. 6. Carry out a rolling restart of the cluster. With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines ",
            "title": "Run the example"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " The Coherence CLI cannot directly start or stop members, but can be use in scripts to detect when services have reached a certain state. You can use the -a MACHINE-SAFE option of get services to wait up to the timeout value (default to 60 seconds), for the StatusHA to be equal or greater that the value you specified. If it reaches this value in the timeout, the command will return 0 exit code but if it does not, then a return code of 1 is returned. The following example would wait up to 60 seconds for DistributedCache services to be MACHINE-SAFE. <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -w -a MACHINE-SAFE ",
            "title": "Scripting the Rolling Redeploy"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " Overview This example walks you through how to monitor the High Available (HA) Status or StatusHA value for Coherence Partitioned Services within a cluster by using the cohctl get services command. StatusHA is most commonly used to ensure services are in a safe state between restarting cache servers during a rolling restart. Setup for this Example In this example we have a cluster called my-cluster with the following setup: A single storage-disabled management node running Management over REST enabled 2 storage-enabled nodes on machine1 2 storage-enabled nodes on machine2 2 storage-enabled nodes on machine3 A Coherence console client running Run the example In this example we will carry out a rolling restart of our cluster to simulate applying an application code patch to our cluster. For more details on rolling restarts, please see Starting and Stopping Cluster Members in the Coherence documentation. The process will be: Stop member 1 on first machine Wait for NODE-SAFE - (Can&#8217;t get to MACHINE-SAFE because of unbalanced partition counts between machines) Stop member 2 on first machine Wait for MACHINE-SAFE - When they could apply an application patch to our first machine. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Read on below for the example. 1. Show the clusters <markup lang=\"bash\" >$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE local http http://localhost:30000/management/coherence/cluster 21.12 my-cluster Standalone $ cohctl set context local Current context is now local 2. Get the members <markup lang=\"bash\" >$ cohctl get members -o wide Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512MB 53MB 459MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1.000GB 307MB 717MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1.000GB 140MB 884MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 175MB 849MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1.000GB 184MB 840MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 124MB 900MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1.000GB 97MB 927MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256MB 22MB 234MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. 3. Get the partitioned services <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -o wide Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced 4. View the caches In our case we have the following caches defined: <markup lang=\"bash\" >$ cohctl get caches Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache tim 1,000 10,160,000 9MB PartitionedCache2 test-1 100,000 116,000,000 110MB PartitionedCache2 test-2 50,000 58,000,000 55MB You can use the -o wide to display more information. 5. Start watching the services <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. 6. Carry out a rolling restart of the cluster. With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Scripting the Rolling Redeploy The Coherence CLI cannot directly start or stop members, but can be use in scripts to detect when services have reached a certain state. You can use the -a MACHINE-SAFE option of get services to wait up to the timeout value (default to 60 seconds), for the StatusHA to be equal or greater that the value you specified. If it reaches this value in the timeout, the command will return 0 exit code but if it does not, then a return code of 1 is returned. The following example would wait up to 60 seconds for DistributedCache services to be MACHINE-SAFE. <markup lang=\"bash\" >$ cohctl get services -t DistributedCache -w -a MACHINE-SAFE ",
            "title": "Rolling Restarts"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " Services Starting and Stopping Cluster Members Coherence MBean Reference ",
            "title": "See Also"
        },
        {
            "location": "/docs/config/10_changing_config_locations",
            "text": " By default, the CLI creates a directory .cohctl off the users home to store connection information, log files and various other information. If you wish to change this directory from the default, you can use the following for each command. <markup lang=\"bash\" >$ cohctl get clusters --config-dir /u01/config You can also specify a different location for the cohct.yaml file that is generated. <markup lang=\"bash\" >$ cohctl get clusters --config /u01/my-config.yaml. It is recommended to leave these values as default unless you have a good reason to change them as you would need to specify the --config option on each command execution. ",
            "title": "Changing Config Locations"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >$ cohctl get federation destinations -c local SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >$ cohctl get federation destinations -c local -o wide SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial and CE patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >$ cohctl get federation destinations -c local cohctl get federation origins -c local SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >$ cohctl get federation origins -c local -o wide SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20MB 755 2,577 1,456ms 248ms ",
            "title": "Get Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'start federation' command starts federation on a service. There are various options available using '-m' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -m, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Start Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -c local Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Stop Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >$ cohctl pause FederatedCache -c local Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Pause Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >$ cohctl replicate all FederatedCache -p secondary-cluster -c local Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. ",
            "title": "Replicate All"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " There are various commands that allow you to work with and issue Federation commands. cohctl get federation - displays federation details for a cluster cohctl start federation - starts federation for a service cohctl stop federation - stops federation for a service cohctl pause federation - pauses federation for a service cohctl replicate all - initiates a replicate of all cache entries for a federated service This is a Coherence Grid Edition feature only and is not available with Community Edition. See the Coherence Documentation for more information on Federation. Get Federation The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >$ cohctl get federation destinations -c local SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >$ cohctl get federation destinations -c local -o wide SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial and CE patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >$ cohctl get federation destinations -c local cohctl get federation origins -c local SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >$ cohctl get federation origins -c local -o wide SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20MB 755 2,577 1,456ms 248ms Start Federation The 'start federation' command starts federation on a service. There are various options available using '-m' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -m, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -c local Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Pause Federation The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >$ cohctl pause FederatedCache -c local Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Replicate All The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >$ cohctl replicate all FederatedCache -p secondary-cluster -c local Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " Federating Caches in the Coherence Documentation Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " Overview There are various commands that allow you to work with and issue Federation commands. cohctl get federation - displays federation details for a cluster cohctl start federation - starts federation for a service cohctl stop federation - stops federation for a service cohctl pause federation - pauses federation for a service cohctl replicate all - initiates a replicate of all cache entries for a federated service This is a Coherence Grid Edition feature only and is not available with Community Edition. See the Coherence Documentation for more information on Federation. Get Federation The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >$ cohctl get federation destinations -c local SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >$ cohctl get federation destinations -c local -o wide SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial and CE patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >$ cohctl get federation destinations -c local cohctl get federation origins -c local SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >$ cohctl get federation origins -c local -o wide SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20MB 755 2,577 1,456ms 248ms Start Federation The 'start federation' command starts federation on a service. There are various options available using '-m' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -m, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >$ cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -c local Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >$ cohctl stop federation FederatedCache -p secondary-cluster -c local Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Pause Federation The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >$ cohctl pause FederatedCache -c local Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Replicate All The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >$ cohctl replicate all FederatedCache -p secondary-cluster -c local Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. See Also Federating Caches in the Coherence Documentation Services ",
            "title": "Federation"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " Use the following command to show the help for the completion command <markup lang=\"bash\" >$ cohctl completion Generate the autocompletion script for cohctl for the specified shell. See each sub-command's help for details on how to use the generated script. Usage: cohctl completion [command] Available Commands: bash generate the autocompletion script for bash fish generate the autocompletion script for fish powershell generate the autocompletion script for powershell zsh generate the autocompletion script for zsh Execute the command for your desired shell. In our case it will be bash . <markup lang=\"bash\" >$ cohctl completion bash &gt; ~/cohctl-completion.sh Once you have generated the script, you can source it. <markup lang=\"bash\" >$ source ~/cohctl-completion.sh Once it is sourced the script, you can type cohctl and then press TAB to auto-complete a command and TAB twice, and it will show completion for a sub command. Complete the describe command by typing the following and then TAB . <markup lang=\"bash\" >$ cohctl des Next, when the following is displayed, press TAB twice and you will see the available describe options. <markup lang=\"bash\" >$ cohctl describe cohctl describe cache (describe a cache) machine (describe a machine) reporter (describe a reporter) cluster (describe a cluster) member (describe a member) service (describe a service) http-server (describe a http server) proxy (describe a proxy server) ",
            "title": "Generate the Script"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " The Coherence CLI allows you to generate a script that will help you work with the tool by providing command completion. Generate the Script Use the following command to show the help for the completion command <markup lang=\"bash\" >$ cohctl completion Generate the autocompletion script for cohctl for the specified shell. See each sub-command's help for details on how to use the generated script. Usage: cohctl completion [command] Available Commands: bash generate the autocompletion script for bash fish generate the autocompletion script for fish powershell generate the autocompletion script for powershell zsh generate the autocompletion script for zsh Execute the command for your desired shell. In our case it will be bash . <markup lang=\"bash\" >$ cohctl completion bash &gt; ~/cohctl-completion.sh Once you have generated the script, you can source it. <markup lang=\"bash\" >$ source ~/cohctl-completion.sh Once it is sourced the script, you can type cohctl and then press TAB to auto-complete a command and TAB twice, and it will show completion for a sub command. Complete the describe command by typing the following and then TAB . <markup lang=\"bash\" >$ cohctl des Next, when the following is displayed, press TAB twice and you will see the available describe options. <markup lang=\"bash\" >$ cohctl describe cohctl describe cache (describe a cache) machine (describe a machine) reporter (describe a reporter) cluster (describe a cluster) member (describe a member) service (describe a service) http-server (describe a http server) proxy (describe a proxy server) ",
            "title": "Command Completion"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >$ cohctl get executors -c local Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None ",
            "title": "Get Executors"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >$ cohctl describe executor executor1 -c local EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false ",
            "title": "Describe Executor"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " There are various commands that allow you to work with and manage Executors. cohctl get executors - displays the executors for a cluster cohctl describe executor - shows information related to a specific executor Get Executors The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >$ cohctl get executors -c local Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None Describe Executor The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >$ cohctl describe executor executor1 -c local EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " Overview There are various commands that allow you to work with and manage Executors. cohctl get executors - displays the executors for a cluster cohctl describe executor - shows information related to a specific executor Get Executors The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >$ cohctl get executors -c local Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None Describe Executor The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >$ cohctl describe executor executor1 -c local EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false ",
            "title": "Executors"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " The purpose of this page is to list troubleshooting guides and work-arounds for issues that you may run into when using the Coherence CLI. This page will be updated and maintained over time to include common issues we see from customers. ",
            "title": "Troubleshooting Guide"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable Solution This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. ",
            "title": "Bad CPU type in executable on macOS"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] Solution This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. ",
            "title": "Cannot execute [Exec format error] on Linux"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >$ cohctl get jfrs -c local null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >$ cohctl get jfrs -c local null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. Solution Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. ",
            "title": "Null returned in JFR commands"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >$ cohctl get services -c wls -U weblogic Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >$ cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >$ cohctl get services -c wls -U weblogic Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >$ cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' Solution You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... ",
            "title": "Cannot find services with quotes in their names"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >$ cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >$ cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >$ cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic Solution You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >$ cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic ",
            "title": "Issues adding correct cluster when WebLogic Server has multiple Coherence clusters"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Bad CPU type in executable on macOS Cannot execute [Exec format error] on Linux Null returned in JFR commands Cannot find services with quotes in their names Issues adding correct cluster when WebLogic Server has multiple Coherence clusters Bad CPU type in executable on macOS Problem You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable Solution This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. Cannot execute [Exec format error] on Linux Problem You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] Solution This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. Null returned in JFR commands Problem You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >$ cohctl get jfrs -c local null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. Solution Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. Cannot find services with quotes in their names Problem You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >$ cohctl get services -c wls -U weblogic Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >$ cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' Solution You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... Issues adding correct cluster when WebLogic Server has multiple Coherence clusters Problem When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >$ cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic Solution You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >$ cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic ",
            "title": "Contents"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host and port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >$ cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >$ cohctl add cluster local -u localhost:30000 Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. ",
            "title": "Add Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl discover clusters Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster coherence-cli$ (master)$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.2.0.0 my-cluster Standalone The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. ",
            "title": "Discover Clusters"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster Examples <markup lang=\"bash\" >$ cohctl remove cluster local Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. ",
            "title": "Remove Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'get clusters' command displays the list of cluster connections. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. ",
            "title": "Get Clusters"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local ",
            "title": "Describe Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " There are various cluster commands that allow you to work with and manage cluster connections. cohctl add cluster - adds a cluster connection cohctl discover clusters - discovers clusters using the Name Service cohctl remove cluster - removes a cluster connection cohctl get clusters - returns the list of cluster connections cohctl describe cluster - describes a cluster referred to by a cluster connection Add Cluster The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host and port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >$ cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >$ cohctl add cluster local -u localhost:30000 Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. Discover Clusters The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl discover clusters Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster coherence-cli$ (master)$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.2.0.0 my-cluster Standalone The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. Remove Cluster The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster Examples <markup lang=\"bash\" >$ cohctl remove cluster local Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. Get Clusters The 'get clusters' command displays the list of cluster connections. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. Describe Cluster The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " Setting up Management over REST Securing Oracle Coherence HTTP Management Over REST Server Contexts NS Lookup Setting request timeout ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " Overview There are various cluster commands that allow you to work with and manage cluster connections. cohctl add cluster - adds a cluster connection cohctl discover clusters - discovers clusters using the Name Service cohctl remove cluster - removes a cluster connection cohctl get clusters - returns the list of cluster connections cohctl describe cluster - describes a cluster referred to by a cluster connection Add Cluster The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host and port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >$ cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >$ cohctl add cluster local -u localhost:30000 Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. Discover Clusters The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >$ cohctl discover clusters Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster coherence-cli$ (master)$ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.2.0.0 my-cluster Standalone The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. Remove Cluster The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster Examples <markup lang=\"bash\" >$ cohctl remove cluster local Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. Get Clusters The 'get clusters' command displays the list of cluster connections. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. Describe Cluster The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local See Also Setting up Management over REST Securing Oracle Coherence HTTP Management Over REST Server Contexts NS Lookup Setting request timeout ",
            "title": "Clusters"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " The Coherence command line interface, cohctl , is a lightweight tool, in the tradition of tools such as kubectl, which can be scripted or used interactively to manage and monitor Coherence clusters. You can use cohctl to view cluster information such as services, caches, members, etc, as well as perform various management operations against clusters. The CLI accesses clusters using the HTTP Management over REST interface and therefore requires this to be enabled on any clusters you want to monitor or manage. See the Coherence Documentation for more information on setting up Management over REST. The CLI is certified with the latest Coherence Community Edition (CE) versions as well as Coherence Commercial versions 12.2.1.4, 14.1.1.0 and above. The CLI does not replace current management and monitoring tools such as the Coherence VisualVM Plugin , Enterprise Manager , or Grafana Dashboards , but complements and provides a lightweight and scriptable alternative. ",
            "title": "What is the Coherence CLI?"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " The CLI complements your existing Coherence management tools and allows you to: Interactively monitor your Coherence clusters from a lightweight terminal-based interface Monitor service \"StatusHA\" during rolling restarts of Coherence clusters Script Coherence monitoring and incorporate results into other management tooling Output results in various formats including text, JSON and utilize JsonPath to extract attributes of interest Gather information that may be useful for Oracle Support to help diagnose issues Connect to standalone or WebLogic Server based clusters from commercial versions 12.2.1.4 and above as well as all Coherence Community Edition (CE) versions Retrieve thread dumps and Java Flight Recordings across members Make changes to various modifiable JMX attributes on services, caches and members ",
            "title": "Why use the Coherence CLI?"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " Install the Coherence CLI Run the Quick Start Explore the Command Reference ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " To enable basic authentication for Management over REST, please follow the instructions in the basic authentication section of the Coherence documentation. ",
            "title": "Enabling Basic Authentication"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " To enable SSL to provide authentication for Management over REST, please follow the instructions in the SSL authentication section of the Coherence documentation. ",
            "title": "Enabling SSL Authentication"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " If you have enabled basic authentication for your Management over REST endpoint, or you are connecting to a WebLogic Server cluster, you must provide the -U username option on all cohctl commands. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) <markup lang=\"bash\" >$ cohctl get members -U username Enter password: ***** ",
            "title": "Working with secured REST endpoints"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " REST API for Managing Oracle Coherence Securing Oracle Coherence HTTP Management Over REST Server ",
            "title": "See Also"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " The Coherence CLI accesses cluster information using the Management over REST endpoint for the cluster as described in the Coherence documentation . Coherence HTTP Management server authentication and authorization are disabled by default. We recommend that this is enabled as outlined in the sections below. Another option for securing access to the management endpoint is to restrict HTTP access to the REST endpoint from trusted or management subnets using standard networking firewall rules. Enabling Basic Authentication To enable basic authentication for Management over REST, please follow the instructions in the basic authentication section of the Coherence documentation. Enabling SSL Authentication To enable SSL to provide authentication for Management over REST, please follow the instructions in the SSL authentication section of the Coherence documentation. Working with secured REST endpoints If you have enabled basic authentication for your Management over REST endpoint, or you are connecting to a WebLogic Server cluster, you must provide the -U username option on all cohctl commands. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) <markup lang=\"bash\" >$ cohctl get members -U username Enter password: ***** See Also REST API for Managing Oracle Coherence Securing Oracle Coherence HTTP Management Over REST Server ",
            "title": "Securing CLI Access"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Retrieve the cluster name, version and cluster size from cohctl describe cluster . <markup lang=\"bash\" >$ cohctl describe cluster my-cluster -o jsonpath=\"$.cluster..['clusterName', 'version', 'clusterSize']\" [\"cluster1\",\"21.12\",2] ",
            "title": "Cluster"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get all service members where the requestAverageDuration &gt; 10 millis. <markup lang=\"bash\" >$ cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 10)]..['nodeId','name','requestAverageDuration']\" | jq [ \"6\", \"PartitionedTopic\", 11.815331, \"5\", \"PartitionedTopic\", 14.489567, \"10\", \"PartitionedTopic\", 11.648249, \"7\", \"PartitionedCache\", 13.946078 ] ",
            "title": "Services"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get all members where the available memory &lt; 250MB <markup lang=\"bash\" >$ cohctl get members -o jsonpath=\"$.items[?(@.memoryAvailableMB &lt; 250)]..['nodeId','memoryMaxMB','memoryAvailableMB']\" | jq [ \"9\", 256, 221 ] ",
            "title": "Members"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get caches where total puts &gt; 10000. <markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.totalPuts &gt; 10000)]..['service','name','totalPuts']\" | jq [ \"PartitionedCache2\", \"test-3\", 2000000, \"PartitionedCache\", \"test\", 220000, \"PartitionedCache2\", \"test-2\", 23000 ] ",
            "title": "Caches"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get http proxy servers where total request count &gt; 40. <markup lang=\"bash\" >$ cohctl get http-servers -o jsonpath=\"$.items[?(@.totalRequestCount &gt; 15)]..['nodeId','name','totalRequestCount']\" [\"1\",\"ManagementHttpProxy\",45] Get persistence where latency average &gt; 0.020ms or 20 micros. <markup lang=\"bash\" >$ cohctl get persistence -o jsonpath=\"$.items[?(@.persistenceLatencyAverage &gt; 0.020)]..['nodeId','name','persistenceLatencyAverage']\" | jq [ \"4\", \"PartitionedCache2\", 0.027694767, \"3\", \"PartitionedCache2\", 0.029615732, \"2\", \"PartitionedCache2\", 0.027542727, \"1\", \"PartitionedCache2\", 0.02668317 ] ",
            "title": "Http Proxy Servers"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " JSONPath is a standard way to query elements of a JSON object. The Coherence CLI allows you to use JSONPath expressions to filter and select data when retrieving information. Below are some examples of how you could use JSONPath with the CLI. This is not an exhaustive list and the use is only limited by you imagination! In the examples below, we are also using the jq utility to format the JSON output. Cluster Examples Services Examples Members Examples Caches Examples Http Proxies Examples Cluster Retrieve the cluster name, version and cluster size from cohctl describe cluster . <markup lang=\"bash\" >$ cohctl describe cluster my-cluster -o jsonpath=\"$.cluster..['clusterName', 'version', 'clusterSize']\" [\"cluster1\",\"21.12\",2] Services Get all service members where the requestAverageDuration &gt; 10 millis. <markup lang=\"bash\" >$ cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 10)]..['nodeId','name','requestAverageDuration']\" | jq [ \"6\", \"PartitionedTopic\", 11.815331, \"5\", \"PartitionedTopic\", 14.489567, \"10\", \"PartitionedTopic\", 11.648249, \"7\", \"PartitionedCache\", 13.946078 ] Members Get all members where the available memory &lt; 250MB <markup lang=\"bash\" >$ cohctl get members -o jsonpath=\"$.items[?(@.memoryAvailableMB &lt; 250)]..['nodeId','memoryMaxMB','memoryAvailableMB']\" | jq [ \"9\", 256, 221 ] Caches Get caches where total puts &gt; 10000. <markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.totalPuts &gt; 10000)]..['service','name','totalPuts']\" | jq [ \"PartitionedCache2\", \"test-3\", 2000000, \"PartitionedCache\", \"test\", 220000, \"PartitionedCache2\", \"test-2\", 23000 ] Http Proxy Servers Get http proxy servers where total request count &gt; 40. <markup lang=\"bash\" >$ cohctl get http-servers -o jsonpath=\"$.items[?(@.totalRequestCount &gt; 15)]..['nodeId','name','totalRequestCount']\" [\"1\",\"ManagementHttpProxy\",45] Get persistence where latency average &gt; 0.020ms or 20 micros. <markup lang=\"bash\" >$ cohctl get persistence -o jsonpath=\"$.items[?(@.persistenceLatencyAverage &gt; 0.020)]..['nodeId','name','persistenceLatencyAverage']\" | jq [ \"4\", \"PartitionedCache2\", 0.027694767, \"3\", \"PartitionedCache2\", 0.029615732, \"2\", \"PartitionedCache2\", 0.027542727, \"1\", \"PartitionedCache2\", 0.02668317 ] ",
            "title": "Using JSONPath"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " An Introduction to JQ JSONPath examples Run the Quick Start ",
            "title": "See Also"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " In this example we have a cluster of 3 storage-enabled members and a cache called test . Our context has been set to local for our local cluster. <markup lang=\"bash\" ># Get the members $ cohctl get members Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 1.500GB, Used: 394MB, Available: 1.115GB (74.3%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 hostname-mac/192.168.1.124 60172 77425 n/a Management 512MB 44MB 468MB 2 hostname-mac/192.168.1.124 60178 77469 n/a TangosolNetCoherence 512MB 190MB 322MB 3 hostname-mac/192.168.1.124 60175 77447 n/a TangosolNetCoherence 512MB 160MB 352MB # Get the caches for the PartitionedCache service $ cohctl get caches -s PartitionedCache Using cluster connection 'local' from current context. Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test 0 0 0MB ",
            "title": "1. List the members and caches"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " Use the following to retrieve the expiry delay and nodes for the cache test. <markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq [ \"test\", [ 0 ], [ \"1\", \"2\", \"3\" ] ] You will see only 1 value of 0 for expiry delay because this query returns the distinct values. ",
            "title": "2. Use JsonPath to display the current expiryDelay"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " The default tier is back and can be changed using the -t option to front if required. <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed You will now see a value of 30 for all nodes. ",
            "title": "3. Set the expiry delay for all nodes to 30 seconds"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq [ \"test\", [ 30 ], [ \"1\", \"2\", \"3\" ] ] ",
            "title": "4. Re-query the expiry delay"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 120 -s PartitionedCache -n 1 Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 120 in tier back for 1 node(s)? (y/n) y operation completed ",
            "title": "5. Set the expiry delay for node 1 to 120 seconds"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >$ cohctl describe cache test -s PartitionedCache -o jsonpath=\"$.items[?(@.name == 'test')]..['expiryDelay','nodeId']\" |jq [ 30, \"3\", 120, \"1\", 30, \"2\" ] ",
            "title": "6. Re-query the expiry delay by describing the cache"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " Cache MBean Reference ",
            "title": "See Also"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " This example shows you how to set various attributes for a cache at runtime. Only the settable attributes such as the following can be modified: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor and requeueThreshold. See the Cache MBean Reference for more information on the above attributes. In the example below, we will set the expiryDelay for a cache. If you restart a cache node after setting an attribute, it will be reset to whatever the value was in the cache configuration. 1. List the members and caches In this example we have a cluster of 3 storage-enabled members and a cache called test . Our context has been set to local for our local cluster. <markup lang=\"bash\" ># Get the members $ cohctl get members Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 1.500GB, Used: 394MB, Available: 1.115GB (74.3%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 hostname-mac/192.168.1.124 60172 77425 n/a Management 512MB 44MB 468MB 2 hostname-mac/192.168.1.124 60178 77469 n/a TangosolNetCoherence 512MB 190MB 322MB 3 hostname-mac/192.168.1.124 60175 77447 n/a TangosolNetCoherence 512MB 160MB 352MB # Get the caches for the PartitionedCache service $ cohctl get caches -s PartitionedCache Using cluster connection 'local' from current context. Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test 0 0 0MB 2. Use JsonPath to display the current expiryDelay Use the following to retrieve the expiry delay and nodes for the cache test. <markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq [ \"test\", [ 0 ], [ \"1\", \"2\", \"3\" ] ] You will see only 1 value of 0 for expiry delay because this query returns the distinct values. 3. Set the expiry delay for all nodes to 30 seconds The default tier is back and can be changed using the -t option to front if required. <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed You will now see a value of 30 for all nodes. 4. Re-query the expiry delay <markup lang=\"bash\" >$ cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq [ \"test\", [ 30 ], [ \"1\", \"2\", \"3\" ] ] 5. Set the expiry delay for node 1 to 120 seconds <markup lang=\"bash\" >$ cohctl set cache test -a expiryDelay -v 120 -s PartitionedCache -n 1 Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 120 in tier back for 1 node(s)? (y/n) y operation completed 6. Re-query the expiry delay by describing the cache <markup lang=\"bash\" >$ cohctl describe cache test -s PartitionedCache -o jsonpath=\"$.items[?(@.name == 'test')]..['expiryDelay','nodeId']\" |jq [ 30, \"3\", 120, \"1\", 30, \"2\" ] See Also Cache MBean Reference ",
            "title": "Setting Cache Attributes"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " This guide is a simple set of steps to get you started with the Coherence CLI. ",
            "title": "Overview"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " You must have downloaded and installed the CLI for your platform as described in the Coherence CLI Installation section . You must have a Coherence cluster running that has Management over REST configured. See the Coherence Documentation for more information on setting up Management over REST. If you do not have a cluster running with Management over REST, you can run the following Docker image to start a Coherence CE cluster and expose management on port 30000. <markup lang=\"bash\" >docker run -d -p 30000:30000 ghcr.io/oracle/coherence-ce:21.12.1 If you are connecting to a Coherence Commercial version you must be on at least the following patch sets: 12.2.1.4.x - minimum patch level of 12.2.1.4.7+ required 14.1.1.0.x - minimum patch level of 14.1.1.0.2+ required If you are connecting to WebLogic Server then see the Clusters Command Reference for more information on the connection requirements. ",
            "title": "Prerequisites"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Issue the following command to show the version details of the tool you are using. <markup lang=\"bash\" >$ cohctl version Coherence Command Line Interface CLI Version: 1.1.0 Date: 2021-10-13T02:36:48Z Commit: 6d1266bb473dad224a3672367126381263af OS: darwin OS Version: amd64 THE CLI creates a hidden directory off the users home directory called .cohctl to store the cluster connection information plus other information. You can issue ls -l ~/.cohctl on Mac/Linux to view the directory contents. ",
            "title": "1. Display the Coherence CLI version"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " If you run cohctl without any arguments you will see the usage. These options are explained in detail in Global Flags . <markup lang=\"bash\" >$ cohctl --help The Coherence Command Line Interface (CLI) provides a way to interact with, and monitor Coherence clusters via a terminal-based interface. Usage: cohctl [command] Available Commands: add add a resource archive archive a resource clear clear a context completion generate the autocompletion script for the specified shell configure configure tracing create create a resource describe show details of a specific resource discover discover a cluster dump dump a resource get display one or many resources help Help about any command log log a resource nslookup execute a Coherence Name Service lookup pause pause a resource recover recover a resource remove remove a resource replicate replicate a federated service resume resume a resource retrieve retrieve a resource set set a configuration value shutdown shutdown a resource start start a resource stop stop a resource suspend suspend a resource version show version information Flags: --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -h, --help help for cohctl -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) Use \"cohctl [command] --help\" for more information about a command. ",
            "title": "2. Display CLI usage"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Next, you must add a connection to a Coherence cluster. In this example the cluster is running on the local machine and the Management over REST port is 30000. Adjust for your Coherence cluster. When you add a cluster connection you give it a context name, which may be different that the cluster name and url to connect to. <markup lang=\"bash\" >$ cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX local http http://localhost:30000/management/coherence/cluster 21.12 my-cluster Standalone If you are not using a Docker container, you can also use the cohctl discover clusters command to automatically discover clusters using the Name Service. ",
            "title": "3. Add a cluster connection"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Now that the cluster connection is added, you can describe the cluster using the describe cluster command. <markup lang=\"bash\" >$ cohctl describe cluster local CLUSTER ------- Cluster Name: cluster1 Version: 21.12 Cluster Size: 2 License Mode: Development Departure Count: 0 Running: true MACHINES -------- MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION server1/192.168.16.3 4 0.0000 8.500GB 6.369GB 74.93% Linux amd64 5.10.47-linuxkit /192.168.16.2 4 0.1200 8.500GB 6.408GB 75.39% Linux amd64 5.10.47-linuxkit MEMBERS ------- Total cluster members: 2 Cluster Heap - Total: 4.254GB, Used: 161MB, Available: 4.097GB (96.3%) SERVICES -------- SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 PERSISTENCE ----------- Total Active Space Used: 0MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE BYTES ACTIVE SPACE AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedCache 2 active 66,439 0MB 0.000ms 0ms 0 Idle CACHES ------ Total Caches: 6, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache customers 123 4,016 0MB TOPICS ------ PROXY SERVERS ------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:20000 Proxy 0 0 0 2 0.0.0.0:20000 Proxy 0 0 0 HTTP SERVERS ------------- NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.DefaultHttpServer 382 0 2 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.DefaultHttpServer 0 0 Depending upon the services and caches running in your cluster, you will see something slightly different. You can also provide the -v (verbose) and -o wide (wide format) flags to display more details. ",
            "title": "4. Describe the cluster"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " You can issue various get commands to display different resources. Issue the get services command to show the services for the cluster only. <markup lang=\"bash\" >$ cohctl get services -c local SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 All commands other than describe cluster require a -c option to specify the cluster you wish to connect to. You can use the cohctl set context &lt;name&gt; to specify the context (or cluster connection) you are working with, so you don&#8217;t have to specify -c each time. <markup lang=\"bash\" >$ cohctl set context local Current context is now local $ cohctl get services SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 ",
            "title": "5. Display services"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Above we have issued a get services command and for all resources you can use a describe command to show specific details about a resource, or a service in our case. The output from a describe command will usually contain much more detailed information about the resource. <markup lang=\"bash\" >$ cohctl describe service PartitionedCache Using cluster connection 'local' from current context. SERVICE DETAILS --------------- Name : PartitionedCache Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] Event Backlog : 0 Event Count : 0 ... Thread Count Min : [1] Thread Count Update Time : [1970-01-01T00:00:00.000+00:00] Thread Idle Count : 2 Thread Pool Sizing Enabled : map[true:3] Transport Backlogged Connection List: [[] [] []] SERVICE MEMBERS --------------- NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS 1 1 1 0.00% 2 2,147,483,647 2 1 1 0.00% 2 2,147,483,647 SERVICE CACHES -------------- Total Caches: 2, Total primary storage: 30MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test1 100,000 26,288,448 25MB PartitionedCache test2 23,000 5,999,040 5MB PERSISTENCE FOR SERVICE ----------------------- Total Active Space Used: 0MB NODE ID PERSISTENCE MODE ACTIVE BYTES ACTIVE SPACE AVG LATENCY MAX LATENCY 1 active 44,560 0MB 0.000ms 0ms 2 active 21,879 0MB 0.000ms 0ms PERSISTENCE COORDINATOR ----------------------- Coordinator Id : 1 Idle : true Operation Status: Idle Snapshots : [] The output above has been truncated for brevity. ",
            "title": "6. Describe a service"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " For all the get commands, you can add the -w option to watch the resource continuously until CTRL-C has been pressed. In the example below we are watching the cluster members. <markup lang=\"bash\" >$ cohctl get members -w 2021-10-13 15:09:52.027636 +0800 AWST m=+0.059034774 Using cluster connection 'local' from current context. Cluster Heap - Total: 1.750GB, Used: 330MB, Available: 1.428GB (81.6%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.121 57133 13919 n/a Management 512MB 186MB 326MB 2 /192.168.1.121 57136 13941 n/a CoherenceServer 1.000GB 67MB 957MB 3 /192.168.1.121 57169 13981 n/a CoherenceConsole 256MB 77MB 179MB 2021-10-13 15:09:57.045536 +0800 AWST m=+5.076898506 Using cluster connection 'local' from current context. Cluster Heap - Total: 1.750GB, Used: 332MB, Available: 1.426GB (81.5%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.121 57133 13919 n/a Management 512MB 186MB 326MB 2 /192.168.1.121 57136 13941 n/a CoherenceServer 1.000GB 68MB 956MB 3 /192.168.1.121 57169 13981 n/a CoherenceConsole 256MB 77MB 179MB You can change the delay from the default of 5 seconds by using -d option and specifying the seconds to delay, e.g. cohctl get members -w -d 10 . You can also use -o wide to display more columns on most commands. ",
            "title": "7. Watching data"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " The default output format is text, but you can specify -o json on any command to get the output in Json format. You can also use -o jsonpath=\"&#8230;&#8203;\" to apply a JsonPath expression. Below we are changing the format for the get members to be Json and piping it thought the jq utility to format. <markup lang=\"bash\" >$ cohctl get members -o json | jq { \"items\": [ { \"processName\": \"13981\", \"socketCount\": -1, \"siteName\": \"n/a\", \"publisherSuccessRate\": 1, \"trafficJamCount\": 8192, \"multicastEnabled\": true, \"refreshTime\": \"2021-10-13T15:12:58.476+08:00\", ... } We can also JSONPath expressions to select or query json output from any command. In the example below we get all service members where the requestAverageDuration &gt; 15 millis. <markup lang=\"bash\" >$ cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 15)]..['nodeId','name','requestAverageDuration']\" [ \"2\", \"PartitionedCache2\", 25.51414, \"1\", \"PartitionedCache2\", 19.662437 ] See the JSONPath examples for more information. ",
            "title": "8. Change the output format to Json and using JSONPath"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Explore more of the commands here . ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Display the Coherence CLI version Display CLI usage Add a cluster connection Describe the cluster Display services Describe a service Watching data Change the output format to Json and using JsonPath 1. Display the Coherence CLI version Issue the following command to show the version details of the tool you are using. <markup lang=\"bash\" >$ cohctl version Coherence Command Line Interface CLI Version: 1.1.0 Date: 2021-10-13T02:36:48Z Commit: 6d1266bb473dad224a3672367126381263af OS: darwin OS Version: amd64 THE CLI creates a hidden directory off the users home directory called .cohctl to store the cluster connection information plus other information. You can issue ls -l ~/.cohctl on Mac/Linux to view the directory contents. 2. Display CLI usage If you run cohctl without any arguments you will see the usage. These options are explained in detail in Global Flags . <markup lang=\"bash\" >$ cohctl --help The Coherence Command Line Interface (CLI) provides a way to interact with, and monitor Coherence clusters via a terminal-based interface. Usage: cohctl [command] Available Commands: add add a resource archive archive a resource clear clear a context completion generate the autocompletion script for the specified shell configure configure tracing create create a resource describe show details of a specific resource discover discover a cluster dump dump a resource get display one or many resources help Help about any command log log a resource nslookup execute a Coherence Name Service lookup pause pause a resource recover recover a resource remove remove a resource replicate replicate a federated service resume resume a resource retrieve retrieve a resource set set a configuration value shutdown shutdown a resource start start a resource stop stop a resource suspend suspend a resource version show version information Flags: --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -h, --help help for cohctl -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) Use \"cohctl [command] --help\" for more information about a command. 3. Add a cluster connection Next, you must add a connection to a Coherence cluster. In this example the cluster is running on the local machine and the Management over REST port is 30000. Adjust for your Coherence cluster. When you add a cluster connection you give it a context name, which may be different that the cluster name and url to connect to. <markup lang=\"bash\" >$ cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster $ cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX local http http://localhost:30000/management/coherence/cluster 21.12 my-cluster Standalone If you are not using a Docker container, you can also use the cohctl discover clusters command to automatically discover clusters using the Name Service. 4. Describe the cluster Now that the cluster connection is added, you can describe the cluster using the describe cluster command. <markup lang=\"bash\" >$ cohctl describe cluster local CLUSTER ------- Cluster Name: cluster1 Version: 21.12 Cluster Size: 2 License Mode: Development Departure Count: 0 Running: true MACHINES -------- MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION server1/192.168.16.3 4 0.0000 8.500GB 6.369GB 74.93% Linux amd64 5.10.47-linuxkit /192.168.16.2 4 0.1200 8.500GB 6.408GB 75.39% Linux amd64 5.10.47-linuxkit MEMBERS ------- Total cluster members: 2 Cluster Heap - Total: 4.254GB, Used: 161MB, Available: 4.097GB (96.3%) SERVICES -------- SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 PERSISTENCE ----------- Total Active Space Used: 0MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE BYTES ACTIVE SPACE AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedCache 2 active 66,439 0MB 0.000ms 0ms 0 Idle CACHES ------ Total Caches: 6, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache customers 123 4,016 0MB TOPICS ------ PROXY SERVERS ------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:20000 Proxy 0 0 0 2 0.0.0.0:20000 Proxy 0 0 0 HTTP SERVERS ------------- NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.DefaultHttpServer 382 0 2 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.DefaultHttpServer 0 0 Depending upon the services and caches running in your cluster, you will see something slightly different. You can also provide the -v (verbose) and -o wide (wide format) flags to display more details. 5. Display services You can issue various get commands to display different resources. Issue the get services command to show the services for the cluster only. <markup lang=\"bash\" >$ cohctl get services -c local SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 All commands other than describe cluster require a -c option to specify the cluster you wish to connect to. You can use the cohctl set context &lt;name&gt; to specify the context (or cluster connection) you are working with, so you don&#8217;t have to specify -c each time. <markup lang=\"bash\" >$ cohctl set context local Current context is now local $ cohctl get services SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 6. Describe a service Above we have issued a get services command and for all resources you can use a describe command to show specific details about a resource, or a service in our case. The output from a describe command will usually contain much more detailed information about the resource. <markup lang=\"bash\" >$ cohctl describe service PartitionedCache Using cluster connection 'local' from current context. SERVICE DETAILS --------------- Name : PartitionedCache Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] Event Backlog : 0 Event Count : 0 ... Thread Count Min : [1] Thread Count Update Time : [1970-01-01T00:00:00.000+00:00] Thread Idle Count : 2 Thread Pool Sizing Enabled : map[true:3] Transport Backlogged Connection List: [[] [] []] SERVICE MEMBERS --------------- NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS 1 1 1 0.00% 2 2,147,483,647 2 1 1 0.00% 2 2,147,483,647 SERVICE CACHES -------------- Total Caches: 2, Total primary storage: 30MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test1 100,000 26,288,448 25MB PartitionedCache test2 23,000 5,999,040 5MB PERSISTENCE FOR SERVICE ----------------------- Total Active Space Used: 0MB NODE ID PERSISTENCE MODE ACTIVE BYTES ACTIVE SPACE AVG LATENCY MAX LATENCY 1 active 44,560 0MB 0.000ms 0ms 2 active 21,879 0MB 0.000ms 0ms PERSISTENCE COORDINATOR ----------------------- Coordinator Id : 1 Idle : true Operation Status: Idle Snapshots : [] The output above has been truncated for brevity. 7. Watching data For all the get commands, you can add the -w option to watch the resource continuously until CTRL-C has been pressed. In the example below we are watching the cluster members. <markup lang=\"bash\" >$ cohctl get members -w 2021-10-13 15:09:52.027636 +0800 AWST m=+0.059034774 Using cluster connection 'local' from current context. Cluster Heap - Total: 1.750GB, Used: 330MB, Available: 1.428GB (81.6%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.121 57133 13919 n/a Management 512MB 186MB 326MB 2 /192.168.1.121 57136 13941 n/a CoherenceServer 1.000GB 67MB 957MB 3 /192.168.1.121 57169 13981 n/a CoherenceConsole 256MB 77MB 179MB 2021-10-13 15:09:57.045536 +0800 AWST m=+5.076898506 Using cluster connection 'local' from current context. Cluster Heap - Total: 1.750GB, Used: 332MB, Available: 1.426GB (81.5%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.121 57133 13919 n/a Management 512MB 186MB 326MB 2 /192.168.1.121 57136 13941 n/a CoherenceServer 1.000GB 68MB 956MB 3 /192.168.1.121 57169 13981 n/a CoherenceConsole 256MB 77MB 179MB You can change the delay from the default of 5 seconds by using -d option and specifying the seconds to delay, e.g. cohctl get members -w -d 10 . You can also use -o wide to display more columns on most commands. 8. Change the output format to Json and using JSONPath The default output format is text, but you can specify -o json on any command to get the output in Json format. You can also use -o jsonpath=\"&#8230;&#8203;\" to apply a JsonPath expression. Below we are changing the format for the get members to be Json and piping it thought the jq utility to format. <markup lang=\"bash\" >$ cohctl get members -o json | jq { \"items\": [ { \"processName\": \"13981\", \"socketCount\": -1, \"siteName\": \"n/a\", \"publisherSuccessRate\": 1, \"trafficJamCount\": 8192, \"multicastEnabled\": true, \"refreshTime\": \"2021-10-13T15:12:58.476+08:00\", ... } We can also JSONPath expressions to select or query json output from any command. In the example below we get all service members where the requestAverageDuration &gt; 15 millis. <markup lang=\"bash\" >$ cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 15)]..['nodeId','name','requestAverageDuration']\" [ \"2\", \"PartitionedCache2\", 25.51414, \"1\", \"PartitionedCache2\", 19.662437 ] See the JSONPath examples for more information. Next Steps Explore more of the commands here . ",
            "title": "Contents"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl set context local Current context is now local ",
            "title": "Set Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl get context Current context: local ",
            "title": "Get Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl clear context Current context was cleared ",
            "title": "Clear Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " A context allows you to specify which cluster connection you are working with so you do no have to specify the connection option, -c , with each command. These include: cohctl set context - Sets the context cohctl get context - Get the current context cohctl clear context - Clears the current context Set Context The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl set context local Current context is now local Get Context The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl get context Current context: local Clear Context The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl clear context Current context was cleared ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " Overview A context allows you to specify which cluster connection you are working with so you do no have to specify the connection option, -c , with each command. These include: cohctl set context - Sets the context cohctl get context - Get the current context cohctl clear context - Clears the current context Set Context The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl set context local Current context is now local Get Context The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl get context Current context: local Clear Context The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >$ cohctl clear context Current context was cleared See Also Clusters ",
            "title": "Contexts"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >$ cohctl get http-servers -c local NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1MB 0MB 80MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2.000GB 0MB 162.000GB 0.0020 0 0 ",
            "title": "Get Elastic Data"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >$ cohctl describe elastic-data RamJournalRM -c local ",
            "title": "Describe Elastic Data"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " There are various commands that allow you to work with and manage Elastic Data. cohctl get elastic-data - displays the elastic data details cohctl describe elastic-data - shows information related to a specific journal type This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Elastic Data The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >$ cohctl get http-servers -c local NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1MB 0MB 80MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2.000GB 0MB 162.000GB 0.0020 0 0 Describe Elastic Data The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >$ cohctl describe elastic-data RamJournalRM -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " Overview There are various commands that allow you to work with and manage Elastic Data. cohctl get elastic-data - displays the elastic data details cohctl describe elastic-data - shows information related to a specific journal type This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Elastic Data The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >$ cohctl get http-servers -c local NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1MB 0MB 80MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2.000GB 0MB 162.000GB 0.0020 0 0 Describe Elastic Data The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >$ cohctl describe elastic-data RamJournalRM -c local ",
            "title": "Elastic Data"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >$ cohctl version Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update set may be contacted. ",
            "title": "Version"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >$ cohctl get ignore-certs Current setting: false ",
            "title": "Get Ignore Certs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >$ cohctl set ignore-certs true Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled ",
            "title": "Set Ignore Certs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >$ cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. ",
            "title": "Get Logs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl get debug Current debug level: off ",
            "title": "Get Debug"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl set debug on Debug is now set to on ",
            "title": "Set Debug"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >$ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management ",
            "title": "Get Management"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >$ cohctl set management -a expiryDelay -v 5000 -c local Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed $ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >$ cohctl set management -a refreshPolicy -v refresh-ahead -c local Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y $ cohctl get management -c local Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management ",
            "title": "Set Management"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >$ cohctl get timeout -c local Current timeout: 15 ",
            "title": "get Timeout"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >$ cohctl set timeout 15 -c local Timeout is now set to 15 ",
            "title": "Set Timeout"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " This section contains miscellaneous commands for various settings. cohctl version - displays the CLI version cohctl get ignore-certs - displays the current setting for ignoring invalid SSL certificates cohctl set ignore-certs - sets the current setting for ignoring invalid SSL certificates to true or false cohctl get logs - displays the cohctl logs cohctl set debug - displays the debug level cohctl get debug - sets the debug level on or off cohctl get management - displays management information for a cluster cohctl set management - sets management information for a cluster cohctl get timeout - displays the current request timeout (in seconds) for any HTTP requests cohctl set timeout - sets the request timeout (in seconds) for any HTTP requests Version The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >$ cohctl version Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update set may be contacted. Get Ignore Certs The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >$ cohctl get ignore-certs Current setting: false Set Ignore Certs The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >$ cohctl set ignore-certs true Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled Get Logs The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >$ cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. Get Debug The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl get debug Current debug level: off Set Debug The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl set debug on Debug is now set to on Get Management The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >$ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set Management The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >$ cohctl set management -a expiryDelay -v 5000 -c local Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed $ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >$ cohctl set management -a refreshPolicy -v refresh-ahead -c local Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y $ cohctl get management -c local Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management get Timeout The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >$ cohctl get timeout -c local Current timeout: 15 Set Timeout The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >$ cohctl set timeout 15 -c local Timeout is now set to 15 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " Overview This section contains miscellaneous commands for various settings. cohctl version - displays the CLI version cohctl get ignore-certs - displays the current setting for ignoring invalid SSL certificates cohctl set ignore-certs - sets the current setting for ignoring invalid SSL certificates to true or false cohctl get logs - displays the cohctl logs cohctl set debug - displays the debug level cohctl get debug - sets the debug level on or off cohctl get management - displays management information for a cluster cohctl set management - sets management information for a cluster cohctl get timeout - displays the current request timeout (in seconds) for any HTTP requests cohctl set timeout - sets the request timeout (in seconds) for any HTTP requests Version The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >$ cohctl version Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update set may be contacted. Get Ignore Certs The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >$ cohctl get ignore-certs Current setting: false Set Ignore Certs The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >$ cohctl set ignore-certs true Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled Get Logs The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >$ cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. Get Debug The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl get debug Current debug level: off Set Debug The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >$ cohctl set debug on Debug is now set to on Get Management The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >$ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set Management The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >$ cohctl set management -a expiryDelay -v 5000 -c local Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed $ cohctl get management -c local Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >$ cohctl set management -a refreshPolicy -v refresh-ahead -c local Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y $ cohctl get management -c local Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management get Timeout The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >$ cohctl get timeout -c local Current timeout: 15 Set Timeout The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >$ cohctl set timeout 15 -c local Timeout is now set to 15 ",
            "title": "Miscellaneous"
        },
        {
            "location": "/docs/config/01_overview",
            "text": " This section contains various configuration options when using the Coherence CLI. Global Flags Overview of all global flags. Command Completion Using command completion scripts. Changing Config Locations Changing configuration file locations. ",
            "title": "Configuration"
        }
 ]
}